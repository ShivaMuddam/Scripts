DECLARE @TableName NVARCHAR(128)
DECLARE @IndexName NVARCHAR(128)
DECLARE @IndexId INT
DECLARE @IsUnique BIT
DECLARE @IsClustered BIT
DECLARE @HasFilter BIT
DECLARE @FilterDefinition NVARCHAR(MAX)
DECLARE @FillFactor INT
DECLARE @IgnoreDupKey BIT
DECLARE @IsPadded BIT
DECLARE @IsDisabled BIT
DECLARE @AllowPageLocks BIT
DECLARE @AllowRowLocks BIT
DECLARE @DataSpaceId INT
DECLARE @ColumnList NVARCHAR(MAX)
DECLARE @IncludedColumnList NVARCHAR(MAX)
DECLARE @SQL NVARCHAR(MAX)

-- Cursor to iterate through each table and index
DECLARE IndexCursor CURSOR FOR
SELECT
    t.name AS TableName,
    i.name AS IndexName,
    i.index_id AS IndexId,
    i.is_unique AS IsUnique,
    i.type AS IsClustered,
    i.has_filter AS HasFilter,
    i.filter_definition AS FilterDefinition,
    i.fill_factor AS FillFactor,
    i.ignore_dup_key AS IgnoreDupKey,
    i.is_padded AS IsPadded,
    i.is_disabled AS IsDisabled,
    i.allow_page_locks AS AllowPageLocks,
    i.allow_row_locks AS AllowRowLocks,
    i.data_space_id AS DataSpaceId
FROM
    sys.tables t
    INNER JOIN sys.indexes i ON t.object_id = i.object_id
WHERE
    i.type IN (1, 2) -- Clustered and Non-Clustered indexes
ORDER BY
    t.name, i.name

OPEN IndexCursor
FETCH NEXT FROM IndexCursor INTO @TableName, @IndexName, @IndexId, @IsUnique, @IsClustered, @HasFilter, @FilterDefinition, @FillFactor, @IgnoreDupKey, @IsPadded, @IsDisabled, @AllowPageLocks, @AllowRowLocks, @DataSpaceId

WHILE @@FETCH_STATUS = 0
BEGIN
    -- Get columns for the index
    SELECT @ColumnList = STRING_AGG(c.name, ', ')
    FROM
        sys.index_columns ic
        INNER JOIN sys.columns c ON ic.object_id = c.object_id AND ic.column_id = c.column_id
    WHERE
        ic.object_id = OBJECT_ID(@TableName) AND ic.index_id = @IndexId AND ic.is_included_column = 0
    ORDER BY
        ic.key_ordinal

    -- Get included columns for the index
    SELECT @IncludedColumnList = STRING_AGG(c.name, ', ')
    FROM
        sys.index_columns ic
        INNER JOIN sys.columns c ON ic.object_id = c.object_id AND ic.column_id = c.column_id
    WHERE
        ic.object_id = OBJECT_ID(@TableName) AND ic.index_id = @IndexId AND ic.is_included_column = 1
    ORDER BY
        ic.index_column_id

    -- Generate the CREATE INDEX script
    SET @SQL = 'CREATE ' +
        CASE @IsUnique
            WHEN 1 THEN 'UNIQUE '
            ELSE ''
        END +
        CASE @IsClustered
            WHEN 1 THEN 'CLUSTERED '
            WHEN 2 THEN 'NONCLUSTERED '
        END +
        'INDEX [' + @IndexName + '] ON [' + OBJECT_SCHEMA_NAME(OBJECT_ID(@TableName)) + '].[' + @TableName + '] (' + @ColumnList + ')'

    IF @IncludedColumnList IS NOT NULL
    BEGIN
        SET @SQL = @SQL + ' INCLUDE (' + @IncludedColumnList + ')'
    END

    SET @SQL = @SQL + ' WITH (PAD_INDEX = ' + CASE WHEN @IsPadded = 1 THEN 'ON' ELSE 'OFF' END + ', ' +
                       'STATISTICS_NORECOMPUTE = ' + CASE WHEN @STATISTICS_NORECOMPUTE = 1 THEN 'ON' ELSE 'OFF' END + ', ' +
                       'SORT_IN_TEMPDB = ' + CASE WHEN @SORT_IN_TEMPDB = 1 THEN 'ON' ELSE 'OFF' END + ', ' +
                       'DROP_EXISTING = ' + CASE WHEN @DROP_EXISTING = 1 THEN 'ON' ELSE 'OFF' END + ', ' +
                       'ONLINE = ' + CASE WHEN @ONLINE = 1 THEN 'ON' ELSE 'OFF' END + ', ' +
                       'ALLOW_ROW_LOCKS = ' + CASE WHEN @AllowRowLocks = 1 THEN 'ON' ELSE 'OFF' END + ', ' +
                       'ALLOW_PAGE_LOCKS = ' + CASE WHEN @AllowPageLocks = 1 THEN 'ON' ELSE 'OFF' END + ', ' +
                       'OPTIMIZE_FOR_SEQUENTIAL_KEY = ' + CASE WHEN @OPTIMIZE_FOR_SEQUENTIAL_KEY = 1 THEN 'ON' ELSE 'OFF' END + ')'

    SET @SQL = @SQL + ' ON ' + CASE WHEN @DataSpaceId = 1 THEN '[PRIMARY]' ELSE '[SECONDARY]' END -- This could be adjusted based on the actual filegroup

    PRINT @SQL
    FETCH NEXT FROM IndexCursor INTO @TableName, @IndexName, @IndexId, @IsUnique, @IsClustered, @HasFilter, @FilterDefinition, @FillFactor, @IgnoreDupKey, @IsPadded, @IsDisabled, @AllowPageLocks, @AllowRowLocks, @DataSpaceId
END

CLOSE IndexCursor
DEALLOCATE IndexCursor
