F OBJECT_ID('tempdb..#SGEI') IS NOT NULL
                        DROP TABLE #SGEI;

                  /* Import the gradeexractimport into temp table #SGEI*/
                  -- Create the temporary table #SGEI and populate data
                  SELECT     PK1, UserPK1, UserEPK, UserLastName, UserFirstName, UserUserId, CoursePK1, CourseEPK, CourseCourseId, CourseTitle, MembershipPK1, AssignmentPK1, AssignmentIsExternalGradeIndicator, AssignmentDisplayColumnName, AssignmentPointsPossible,
                  AssignmentDisplayTitle, GradePK1, GradeAttemptDate, GradeAttemptStatus, GradeManualGrade, GradeManualScore, GradeDisplayGrade, GradeDisplayScore, GradeExemptIndicator, GradeOverrideDate, SourceSystem
               INTO          [#SGEI]
               FROM        stage.GradeExtractImport_d2l
                  
                  -- Create index on the temporary table for better performance
                  CREATE CLustered INDEX idx_SGEI_UserPK1 ON #SGEI (PK1);
--Insert the dupes into error table
                  --WITH cte AS (
                  --SELECT *,ROW_NUMBER() OVER(PARTITION BY UserPK1,CoursePK1,AssignmentPK1,MembershipPK1,GradePK1 ORDER BY(SELECT NULL) ) AS rn  FROM #SGEI
                  --)
                  INSERT INTO Stage.ODS_Duplicates
                  --SELECT PK1 AS PrimaryKey, 'Grade_Merge' AS STEP_FAILED_ON,CONVERT(DATE, GETDATE()) AS PROCCESED_ON  FROM cte WHERE cte.rn>1
                   SELECT [PK1] AS PrimaryKey,'Grade_Merge' AS STEP_FAILED_ON,CONVERT(DATE, GETDATE()) AS PROCCESED_ON  FROM (
                       SELECT *,ROW_NUMBER() OVER (PARTITION BY [UserPK1], [CoursePK1], [AssignmentPK1], [MembershipPK1], [GradePK1] ORDER BY (SELECT NULL) ) AS rn
                        FROM #SGEI ) as cte WHERE cte.rn > 1

--Delete dupes from temp table
               DELETE
                  FROM #SGEI
                  WHERE EXISTS (
                              SELECT 1
                              FROM Stage.ODS_Duplicates d
                              WHERE d.PROCCESED_ON = CONVERT(DATE, GETDATE())
                                    AND d.PrimaryKey = #SGEI.PK1
                              );



                  WITH GEICTE (
                        [UserPK1],
                        [UserEPK],
                        [UserLastName],
                        [UserFirstName],
                        [UserUserId],
                        [CoursePK1],
                        [CourseEPK],
                        [CourseCourseId],
                        [CourseTitle],
                        [MembershipPK1],
                        [AssignmentPK1],
                        [AssignmentIsExternalGradeIndicator],
                        [AssignmentDisplayColumnName],
                        [AssignmentPointsPossible],
                        [AssignmentDisplayTitle],
                        [GradePK1],
                        [GradeAttemptDate],
                        [GradeAttemptStatus],
                        [GradeManualGrade],
                        [GradeManualScore],
                        [GradeDisplayGrade],
                        [GradeDisplayScore],
                        [GradeExemptIndicator],
                        [GradeOverrideDate],
                        [SourceSystem]                
                  )
                  AS (
                        SELECT
                              [UserPK1],
                              [UserEPK],
                              [UserLastName],
                              [UserFirstName],
                              [UserUserId],
                              [CoursePK1],
                              [CourseEPK],
                              [CourseCourseId],
                              [CourseTitle],
                              [MembershipPK1],
                              [AssignmentPK1],
                              [AssignmentIsExternalGradeIndicator],
                              [AssignmentDisplayColumnName],
                              [AssignmentPointsPossible],
                              [AssignmentDisplayTitle],
                              [GradePK1],
                              [GradeAttemptDate],
                              [GradeAttemptStatus],
                              [GradeManualGrade],
                              [GradeManualScore],
                              [GradeDisplayGrade],
                              [GradeDisplayScore],
                              [GradeExemptIndicator],
                              [GradeOverrideDate],
                              [SourceSystem]
                        FROM [stage].[GradeExtractImport]
                        WHERE [SourceSystem] = 'D2L'
                  )
             MERGE into GEICTE AS target
                  USING #SGEI as source
                  ON  
                        ISNULL(source.[UserPK1], '') = ISNULL(target.[UserPK1], '')
                        AND ISNULL(source.[CoursePK1], '') = ISNULL(target.[CoursePK1], '')
                        AND ISNULL(source.[AssignmentPK1], '') =ISNULL(target.[AssignmentPK1], '')
                        AND ISNULL(source.[MembershipPk1], '') = ISNULL(target.[MembershipPk1], '')
                        AND ISNULL(source.[GradePK1], '') = ISNULL(target.[GradePK1], '')

                        WHEN MATCHED AND NOT EXISTS
                        (
                              SELECT
                                    source.[UserEPK]
                                    ,source.[UserLastName]
                                    ,source.[UserFirstName]
                                    ,source.[UserUserId]
                                    ,source.[CourseEPK]
                                    ,source.[CourseCourseId]
                                    ,source.[CourseTitle]
                                    ,source.[AssignmentIsExternalGradeIndicator]
                                    ,source.[AssignmentDisplayColumnName]
                                    ,source.[AssignmentPointsPossible]
                                    ,source.[AssignmentDisplayTitle]
                                    ,source.[GradeAttemptDate]
                                    ,source.[GradeAttemptStatus]
                                    ,source.[GradeManualGrade]
                                    ,source.[GradeManualScore]
                                    ,source.[GradeDisplayGrade]
                                    ,source.[GradeDisplayScore]
                                    ,source.[GradeExemptIndicator]
                                    ,source.[GradeOverrideDate]
                                    ,source.[SourceSystem]                                

                              INTERSECT

                              SELECT
                                    target.[UserEPK]
                                    ,target.[UserLastName]
                                    ,target.[UserFirstName]
                                    ,target.[UserUserId]
                                    ,target.[CourseEPK]
                                    ,target.[CourseCourseId]
                                    ,target.[CourseTitle]
                                    ,target.[AssignmentIsExternalGradeIndicator]
                                    ,target.[AssignmentDisplayColumnName]
                                    ,target.[AssignmentPointsPossible]
                                    ,target.[AssignmentDisplayTitle]
                                    ,target.[GradeAttemptDate]
                                    ,target.[GradeAttemptStatus]
                                    ,target.[GradeManualGrade]
                                    ,target.[GradeManualScore]
                                    ,target.[GradeDisplayGrade]
                                    ,target.[GradeDisplayScore]
                                    ,target.[GradeExemptIndicator]
                                    ,target.[GradeOverrideDate]
                                    ,target.[SourceSystem]
                        ) THEN

                        UPDATE SET
                              [UserEPK] = source.[UserEPK]
                              ,[UserLastName] = source.[UserLastName]
                              ,[UserFirstName] = source.[UserFirstName]
                              ,[UserUserId] = source.[UserUserId]
                              ,[CourseEPK] = source.[CourseEPK]
                              ,[CourseCourseId] = source.[CourseCourseId]
                              ,[CourseTitle] = source.[CourseTitle]
                              ,[AssignmentIsExternalGradeIndicator] = source.[AssignmentIsExternalGradeIndicator]
                              ,[AssignmentDisplayColumnName] = source.[AssignmentDisplayColumnName]
                              ,[AssignmentPointsPossible] = source.[AssignmentPointsPossible]
                              ,[AssignmentDisplayTitle] = source.[AssignmentDisplayTitle]
                              ,[GradeAttemptDate] = source.[GradeAttemptDate]
                              ,[GradeAttemptStatus] = source.[GradeAttemptStatus]
                              ,[GradeManualGrade] = source.[GradeManualGrade]
                              ,[GradeManualScore] = source.[GradeManualScore]
                              ,[GradeDisplayGrade] = source.[GradeDisplayGrade]
                              ,[GradeDisplayScore] = source.[GradeDisplayScore]
                              ,[GradeExemptIndicator] = source.[GradeExemptIndicator]
                              ,[GradeOverrideDate] = source.[GradeOverrideDate]
                              ,[SourceSystem] = source.[SourceSystem]                           

                        WHEN NOT MATCHED THEN
                                    INSERT
                                    (
                                          [UserPK1],
                                          [UserEPK],
                                          [UserLastName],
                                          [UserFirstName],
                                          [UserUserId],
                                          [CoursePK1],
                                          [CourseEPK],
                                          [CourseCourseId],
                                          [CourseTitle],
                                          [MembershipPK1],
                                          [AssignmentPK1],
                                          [AssignmentIsExternalGradeIndicator],
                                          [AssignmentDisplayColumnName],
                                          [AssignmentPointsPossible],
                                          [AssignmentDisplayTitle],
                                          [GradePK1],
                                          [GradeAttemptDate],
                                          [GradeAttemptStatus],
                                          [GradeManualGrade],
                                          [GradeManualScore],
                                          [GradeDisplayGrade],
                                          [GradeDisplayScore],
                                          [GradeExemptIndicator],
                                          [GradeOverrideDate],
                                          [SourceSystem]
                                    )
                                    VALUES
                                    (
                                          source.[UserPK1],
                                          source.[UserEPK],
                                          source.[UserLastName],
                                          source.[UserFirstName],
                                          source.[UserUserId],
                                          source.[CoursePK1],
                                          source.[CourseEPK],
                                          source.[CourseCourseId],
                                          source.[CourseTitle],
                                          source.[MembershipPK1],
                                          source.[AssignmentPK1],
                                          source.[AssignmentIsExternalGradeIndicator],
                                          source.[AssignmentDisplayColumnName],
                                          source.[AssignmentPointsPossible],
                                          source.[AssignmentDisplayTitle],
                                          source.[GradePK1],
                                          source.[GradeAttemptDate],
                                          source.[GradeAttemptStatus],
                                          source.[GradeManualGrade],
                                          source.[GradeManualScore],
                                          source.[GradeDisplayGrade],
                                          source.[GradeDisplayScore],
                                          source.[GradeExemptIndicator],
                                          source.[GradeOverrideDate],
                                          source.[SourceSystem]
                                    )

                        WHEN NOT MATCHED BY SOURCE THEN     
                                    DELETE; can you rewrite the query without using  #SGEI directly executing the table

To rewrite the query without using the temporary table #SGEI directly and instead execute operations on the table stage.GradeExtractImport_d2l, follow these steps:

Create a Common Table Expression (CTE) for indexing and deduplication purposes.
Insert duplicates directly into the error table.
Delete duplicates directly from the source table.
Merge the deduplicated data into the destination table.
Here's the modified query:

sql
Copy code
-- Check and drop the temporary table if it exists
IF OBJECT_ID('tempdb..#SGEI') IS NOT NULL
    DROP TABLE #SGEI;

-- Create a Common Table Expression (CTE) to select and deduplicate the data from the source table
WITH CTE_SGEI AS (
    SELECT
        PK1, UserPK1, UserEPK, UserLastName, UserFirstName, UserUserId, CoursePK1, CourseEPK, CourseCourseId, CourseTitle,
        MembershipPK1, AssignmentPK1, AssignmentIsExternalGradeIndicator, AssignmentDisplayColumnName, AssignmentPointsPossible,
        AssignmentDisplayTitle, GradePK1, GradeAttemptDate, GradeAttemptStatus, GradeManualGrade, GradeManualScore, GradeDisplayGrade,
        GradeDisplayScore, GradeExemptIndicator, GradeOverrideDate, SourceSystem,
        ROW_NUMBER() OVER (PARTITION BY UserPK1, CoursePK1, AssignmentPK1, MembershipPK1, GradePK1 ORDER BY (SELECT NULL)) AS rn
    FROM stage.GradeExtractImport_d2l
)
-- Insert the duplicates into the error table
INSERT INTO Stage.ODS_Duplicates (PrimaryKey, STEP_FAILED_ON, PROCCESED_ON)
SELECT PK1 AS PrimaryKey, 'Grade_Merge' AS STEP_FAILED_ON, CONVERT(DATE, GETDATE()) AS PROCCESED_ON
FROM CTE_SGEI
WHERE rn > 1;

-- Delete duplicates from the source table
DELETE FROM stage.GradeExtractImport_d2l
WHERE PK1 IN (
    SELECT PK1
    FROM CTE_SGEI
    WHERE rn > 1
);

-- Create another CTE for merging data
WITH GEICTE AS (
    SELECT
        UserPK1, UserEPK, UserLastName, UserFirstName, UserUserId, CoursePK1, CourseEPK, CourseCourseId, CourseTitle,
        MembershipPK1, AssignmentPK1, AssignmentIsExternalGradeIndicator, AssignmentDisplayColumnName, AssignmentPointsPossible,
        AssignmentDisplayTitle, GradePK1, GradeAttemptDate, GradeAttemptStatus, GradeManualGrade, GradeManualScore, GradeDisplayGrade,
        GradeDisplayScore, GradeExemptIndicator, GradeOverrideDate, SourceSystem
    FROM stage.GradeExtractImport_d2l
    WHERE SourceSystem = 'D2L'
)
MERGE INTO GEICTE AS target
USING (
    SELECT DISTINCT
        UserPK1, UserEPK, UserLastName, UserFirstName, UserUserId, CoursePK1, CourseEPK, CourseCourseId, CourseTitle,
        MembershipPK1, AssignmentPK1, AssignmentIsExternalGradeIndicator, AssignmentDisplayColumnName, AssignmentPointsPossible,
        AssignmentDisplayTitle, GradePK1, GradeAttemptDate, GradeAttemptStatus, GradeManualGrade, GradeManualScore, GradeDisplayGrade,
        GradeDisplayScore, GradeExemptIndicator, GradeOverrideDate, SourceSystem
    FROM stage.GradeExtractImport_d2l
) AS source
ON
    ISNULL(source.UserPK1, '') = ISNULL(target.UserPK1, '') AND
    ISNULL(source.CoursePK1, '') = ISNULL(target.CoursePK1, '') AND
    ISNULL(source.AssignmentPK1, '') = ISNULL(target.AssignmentPK1, '') AND
    ISNULL(source.MembershipPK1, '') = ISNULL(target.MembershipPK1, '') AND
    ISNULL(source.GradePK1, '') = ISNULL(target.GradePK1, '')
WHEN MATCHED AND NOT EXISTS (
    SELECT
        source.UserEPK, source.UserLastName, source.UserFirstName, source.UserUserId, source.CourseEPK, source.CourseCourseId,
        source.CourseTitle, source.AssignmentIsExternalGradeIndicator, source.AssignmentDisplayColumnName, source.AssignmentPointsPossible,
        source.AssignmentDisplayTitle, source.GradeAttemptDate, source.GradeAttemptStatus, source.GradeManualGrade, source.GradeManualScore,
        source.GradeDisplayGrade, source.GradeDisplayScore, source.GradeExemptIndicator, source.GradeOverrideDate, source.SourceSystem
    INTERSECT
    SELECT
        target.UserEPK, target.UserLastName, target.UserFirstName, target.UserUserId, target.CourseEPK, target.CourseCourseId,
        target.CourseTitle, target.AssignmentIsExternalGradeIndicator, target.AssignmentDisplayColumnName, target.AssignmentPointsPossible,
        target.AssignmentDisplayTitle, target.GradeAttemptDate, target.GradeAttemptStatus, target.GradeManualGrade, target.GradeManualScore,
        target.GradeDisplayGrade, target.GradeDisplayScore, target.GradeExemptIndicator, target.GradeOverrideDate, target.SourceSystem
) THEN
    UPDATE SET
        UserEPK = source.UserEPK, UserLastName = source.UserLastName, UserFirstName = source.UserFirstName, UserUserId = source.UserUserId,
        CourseEPK = source.CourseEPK, CourseCourseId = source.CourseCourseId, CourseTitle = source.CourseTitle,
        AssignmentIsExternalGradeIndicator = source.AssignmentIsExternalGradeIndicator, AssignmentDisplayColumnName = source.AssignmentDisplayColumnName,
        AssignmentPointsPossible = source.AssignmentPointsPossible, AssignmentDisplayTitle = source.AssignmentDisplayTitle,
        GradeAttemptDate = source.GradeAttemptDate, GradeAttemptStatus = source.GradeAttemptStatus, GradeManualGrade = source.GradeManualGrade,
        GradeManualScore = source.GradeManualScore, GradeDisplayGrade = source.GradeDisplayGrade, GradeDisplayScore = source.GradeDisplayScore,
        GradeExemptIndicator = source.GradeExemptIndicator, GradeOverrideDate = source.GradeOverrideDate, SourceSystem = source.SourceSystem
WHEN NOT MATCHED THEN
    INSERT (
        UserPK1, UserEPK, UserLastName, UserFirstName, UserUserId, CoursePK1, CourseEPK, CourseCourseId, CourseTitle,
        MembershipPK1, AssignmentPK1, AssignmentIsExternalGradeIndicator, AssignmentDisplayColumnName, AssignmentPointsPossible,
        AssignmentDisplayTitle, GradePK1, GradeAttemptDate, GradeAttemptStatus, GradeManualGrade, GradeManualScore, GradeDisplayGrade,
        GradeDisplayScore, GradeExemptIndicator, GradeOverrideDate, SourceSystem
    )
    VALUES (
        source.UserPK1, source.UserEPK, source.UserLastName, source.UserFirstName, source.UserUserId, source.CoursePK1, source.CourseEPK,
        source.CourseCourseId, source.CourseTitle, source.MembershipPK1, source.AssignmentPK1, source.AssignmentIsExternalGradeIndicator,
        source.AssignmentDisplayColumnName, source.AssignmentPointsPossible, source.AssignmentDisplayTitle, source.GradePK1,
        source.GradeAttemptDate, source.GradeAttemptStatus, source.GradeManualGrade, source.GradeManualScore, source.GradeDisplayGrade,
        source.GradeDisplayScore, source.GradeExemptIndicator, source.GradeOverrideDate, source.SourceSystem
    )
WHEN NOT MATCHED BY SOURCE THEN
    DELETE;
Explanation:
CTE_SGEI: Selects data from the source table and assigns row numbers to potential duplicates.
Insert into Stage.ODS_Duplicates: Identifies duplicates (rows with rn > 1) and inserts them into the error table.
Delete from stage.GradeExtractImport_d2l: Deletes the duplicates identified in the previous step.
GEICTE CTE: Prepares the data for merging.
MERGE: Performs the merge operation, updating existing records, inserting new records, and deleting records not matched by the source.
This approach eliminates the need for a temporary table by operating directly on the source table and using CTEs to handle deduplication and merging tasks.

Any indexes is required to improve the performance and how do we compare the results of both

To improve performance, especially for large datasets, indexing is crucial. Since the operations involve frequent access and joins on multiple columns, the right indexes can significantly speed up these operations. Here’s a strategy to add indexes to improve performance:

Clustered Index on Primary Key (PK1):

This ensures efficient searching and data retrieval based on the primary key.
Non-Clustered Indexes on frequently used columns in MERGE and WHERE clauses:

UserPK1, CoursePK1, AssignmentPK1, MembershipPK1, GradePK1: These columns are heavily used in the query, so indexing them can speed up joins and filtering.
Index on SourceSystem:

Since SourceSystem is used in the WHERE clause to filter data, an index here will help.
Creating the Indexes
You can create the indexes on the stage.GradeExtractImport_d2l table as follows:

sql
Copy code
-- Create a clustered index on PK1
CREATE CLUSTERED INDEX idx_GradeExtractImport_d2l_PK1
ON stage.GradeExtractImport_d2l (PK1);

-- Create non-clustered indexes on columns used in the query
CREATE NONCLUSTERED INDEX idx_GradeExtractImport_d2l_UserPK1
ON stage.GradeExtractImport_d2l (UserPK1);

CREATE NONCLUSTERED INDEX idx_GradeExtractImport_d2l_CoursePK1
ON stage.GradeExtractImport_d2l (CoursePK1);

CREATE NONCLUSTERED INDEX idx_GradeExtractImport_d2l_AssignmentPK1
ON stage.GradeExtractImport_d2l (AssignmentPK1);

CREATE NONCLUSTERED INDEX idx_GradeExtractImport_d2l_MembershipPK1
ON stage.GradeExtractImport_d2l (MembershipPK1);

CREATE NONCLUSTERED INDEX idx_GradeExtractImport_d2l_GradePK1
ON stage.GradeExtractImport_d2l (GradePK1);

CREATE NONCLUSTERED INDEX idx_GradeExtractImport_d2l_SourceSystem
ON stage.GradeExtractImport_d2l (SourceSystem);
Comparing Results of Both Approaches
To compare the results of both approaches (using the temporary table and the direct approach with indexes), you can follow these steps:

Performance Metrics:

Execution Time: Measure the execution time of the entire operation.
IO Statistics: Use SQL Server’s SET STATISTICS IO to measure logical reads.
Execution Plan: Compare the execution plans of both queries to see the cost and the efficiency of each operation.
Correctness:

Row Counts: Ensure that the row counts before and after the operation match in both approaches.
Data Consistency: Verify that the data in the destination table (stage.GradeExtractImport_d2l) is the same in both approaches.
Example Comparison:
Execution Time:

sql
Copy code
-- Before running the query
SET STATISTICS TIME ON;

-- Run your query here (either the temp table version or the direct version)

-- After running the query
SET STATISTICS TIME OFF;
IO Statistics:

sql
Copy code
-- Before running the query
SET STATISTICS IO ON;

-- Run your query here (either the temp table version or the direct version)

-- After running the query
SET STATISTICS IO OFF;
Execution Plan:

sql
Copy code
-- Before running the query
SET SHOWPLAN_ALL ON;

-- Run your query here (either the temp table version or the direct version)

-- After running the query
SET SHOWPLAN_ALL OFF;
Row Counts and Data Consistency:

sql
Copy code
-- Row count comparison
SELECT COUNT(*) FROM stage.GradeExtractImport_d2l;

-- Data consistency check (compare a sample set of rows from both approaches)
SELECT TOP 100 * FROM stage.GradeExtractImport_d2l ORDER BY NEWID();
By following these steps, you can compare the performance and correctness of both approaches to ensure that the direct approach with indexes is optimized and produces accurate results.








ChatGPT can make mistakes. Check important info
